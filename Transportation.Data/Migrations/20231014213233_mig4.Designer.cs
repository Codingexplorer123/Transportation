// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Transportation.Data.Context;

#nullable disable

namespace Transportation.Data.Migrations
{
    [DbContext(typeof(TransportationDbContext))]
    [Migration("20231014213233_mig4")]
    partial class mig4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6bfb4451-0ae7-46df-a745-75d7607da4b9",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1ce1b78c-2a22-44db-85d5-577558fd5b25",
                            RoleId = "6bfb4451-0ae7-46df-a745-75d7607da4b9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TransportationEntity.Arac", b =>
                {
                    b.Property<int>("AracId")
                        .HasColumnType("int");

                    b.Property<string>("AracPlakaNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AracSoforuIsim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AracSoforuSoyisim")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AracSoforuTelNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AracTipi")
                        .HasColumnType("int");

                    b.Property<string>("FirmaTelNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AracId");

                    b.HasIndex("AracPlakaNo")
                        .IsUnique();

                    b.HasIndex("AracSoforuTelNo")
                        .IsUnique();

                    b.ToTable("Araclar");

                    b.HasData(
                        new
                        {
                            AracId = 1,
                            AracPlakaNo = "TR 22 VA 669",
                            AracSoforuIsim = "Ava",
                            AracSoforuSoyisim = "Deckow",
                            AracSoforuTelNo = "(269) 205-3673",
                            AracTipi = 1,
                            FirmaTelNo = "(083) 789-5655"
                        },
                        new
                        {
                            AracId = 2,
                            AracPlakaNo = "TR 64 NM 495",
                            AracSoforuIsim = "Theron",
                            AracSoforuSoyisim = "Crist",
                            AracSoforuTelNo = "(167) 894-5011",
                            AracTipi = 4,
                            FirmaTelNo = "(022) 764-9970"
                        },
                        new
                        {
                            AracId = 3,
                            AracPlakaNo = "TR 13 MF 494",
                            AracSoforuIsim = "Carroll",
                            AracSoforuSoyisim = "Keebler",
                            AracSoforuTelNo = "(747) 276-8587",
                            AracTipi = 4,
                            FirmaTelNo = "(097) 727-3110"
                        },
                        new
                        {
                            AracId = 4,
                            AracPlakaNo = "TR 71 BE 590",
                            AracSoforuIsim = "Mohamed",
                            AracSoforuSoyisim = "Nienow",
                            AracSoforuTelNo = "(575) 817-0374",
                            AracTipi = 1,
                            FirmaTelNo = "(086) 575-3676"
                        });
                });

            modelBuilder.Entity("TransportationEntity.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Area")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Class")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Controller")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Icon")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MenuAdi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Menuler");
                });

            modelBuilder.Entity("TransportationEntity.MyUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TCNo")
                        .HasColumnType("bigint");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1ce1b78c-2a22-44db-85d5-577558fd5b25",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8db55cf1-2f48-4f80-af50-9208c652830e",
                            Email = "admin@qwe.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f9c9079c-e9b5-42fc-bea6-2b4790ed620b",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("TransportationEntity.Nakliye", b =>
                {
                    b.Property<int>("NakliyeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Aciklama")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("AracId")
                        .HasColumnType("int");

                    b.Property<string>("MusteriDegerlendirmeleri")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("NakliyeYapildimi")
                        .HasColumnType("bit");

                    b.Property<int>("RezervasyonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TalepTarihi")
                        .HasColumnType("datetime2");

                    b.HasKey("NakliyeId");

                    b.ToTable("Nakliyeler");

                    b.HasData(
                        new
                        {
                            NakliyeId = 1,
                            AracId = 1,
                            NakliyeYapildimi = false,
                            RezervasyonId = 1,
                            TalepTarihi = new DateTime(2021, 8, 24, 22, 8, 38, 922, DateTimeKind.Local).AddTicks(1514)
                        },
                        new
                        {
                            NakliyeId = 2,
                            AracId = 2,
                            NakliyeYapildimi = true,
                            RezervasyonId = 2,
                            TalepTarihi = new DateTime(2020, 10, 29, 4, 9, 49, 504, DateTimeKind.Local).AddTicks(4700)
                        },
                        new
                        {
                            NakliyeId = 3,
                            AracId = 3,
                            NakliyeYapildimi = false,
                            RezervasyonId = 3,
                            TalepTarihi = new DateTime(2022, 10, 19, 6, 29, 59, 67, DateTimeKind.Local).AddTicks(2312)
                        },
                        new
                        {
                            NakliyeId = 4,
                            AracId = 4,
                            NakliyeYapildimi = false,
                            RezervasyonId = 4,
                            TalepTarihi = new DateTime(2021, 12, 1, 11, 25, 18, 424, DateTimeKind.Local).AddTicks(9374)
                        });
                });

            modelBuilder.Entity("TransportationEntity.Rezervasyon", b =>
                {
                    b.Property<int>("RezervasyonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RezervasyonId"));

                    b.Property<string>("NakliyeFirmasiAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NakliyeFirmasiEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RezervasyonTarihi")
                        .HasColumnType("datetime2");

                    b.HasKey("RezervasyonId");

                    b.HasIndex("NakliyeFirmasiEmail")
                        .IsUnique();

                    b.ToTable("Rezervasyonlar");

                    b.HasData(
                        new
                        {
                            RezervasyonId = 1,
                            NakliyeFirmasiAdi = "Effertz and Sons Tasimacilik",
                            NakliyeFirmasiEmail = "EffertzandSonsTasimacilik.Friesen49@gmail.com"
                        },
                        new
                        {
                            RezervasyonId = 2,
                            NakliyeFirmasiAdi = "Murray and Sons Tasimacilik",
                            NakliyeFirmasiEmail = "MurrayandSonsTasimacilik.Farrell67@gmail.com"
                        },
                        new
                        {
                            RezervasyonId = 3,
                            NakliyeFirmasiAdi = "Champlin - Ullrich Ulastirma",
                            NakliyeFirmasiEmail = "Champlin-UllrichUlastirma.Kovacek70@hotmail.com"
                        },
                        new
                        {
                            RezervasyonId = 4,
                            NakliyeFirmasiAdi = "Leannon LLC Tasimacilik",
                            NakliyeFirmasiEmail = "LeannonLLCTasimacilik.Ullrich@hotmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TransportationEntity.MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TransportationEntity.MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransportationEntity.MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TransportationEntity.MyUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TransportationEntity.Arac", b =>
                {
                    b.HasOne("TransportationEntity.Nakliye", "Nakliye")
                        .WithMany("Araclar")
                        .HasForeignKey("AracId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nakliye");
                });

            modelBuilder.Entity("TransportationEntity.Menu", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TransportationEntity.Nakliye", b =>
                {
                    b.HasOne("TransportationEntity.Rezervasyon", "Rezervasyon")
                        .WithOne("Nakliye")
                        .HasForeignKey("TransportationEntity.Nakliye", "NakliyeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rezervasyon");
                });

            modelBuilder.Entity("TransportationEntity.Nakliye", b =>
                {
                    b.Navigation("Araclar");
                });

            modelBuilder.Entity("TransportationEntity.Rezervasyon", b =>
                {
                    b.Navigation("Nakliye");
                });
#pragma warning restore 612, 618
        }
    }
}
